# Configuracion Paquetizado *Nesario a la hora de desplegar en Openshift*
quarkus.package.type=uber-jar

#Configuracion del formato de logs
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{2.}] (%t) %s%e%n

# Configuracion con Open Id Conect 
#quarkus.oidc.auth-server-url => Especificar la URL del servidor de autenticaci贸n en un escenario de autenticaci贸n.
#quarkus.oidc.client-id => Especificar el identificador del cliente (client ID) en un escenario de autenticaci贸n.
#quarkus.oidc.credentials.secret => Especificar el secreto del cliente (client secret) en un escenario de autenticaci贸n.

# Para pruebas locales 
# quarkus.oidc.auth-server-url=https://keycloak-sso-arquetypes.apps.cluster-kpdf9.kpdf9.sandbox3011.opentlc.com/auth/realms/sso-example
# quarkus.oidc.client-id=gateway-local

# Para pruebas con variables de entorno dentro de OCP
quarkus.oidc.auth-server-url=${OPENSHIFT_SSO_REALM_URL}
quarkus.oidc.client-id=${OPENSHIFT_SSO_CLIENT}
quarkus.oidc.application-type=service

#Configuracion que indica el path de los servicios SOAP, si no especifica la raiz sera "/"
quarkus.cxf.path =/soap

# Configuracion uri base utilizadas en el cliente CXF
# cxf.hello.baseUri = http://172.30.32.129:8080
# cxf.hello.baseUri = http://localhost:9090

#Configuracion uri base utilizadas en el cliente CXF
cxf.hello.baseUri = ${OPENSHIFT_SOAP_BASEURI}

#Configuracion del cliente CXF hService para el consumo de un servicio SOAP
quarkus.cxf.client.hService.wsdl = ${cxf.hello.baseUri}/soap/HelloService?wsdl
quarkus.cxf.client.hService.client-endpoint-url = ${cxf.hello.baseUri}/soap/HelloService
# quarkus.cxf.client.hService.service-interface = namespace.unknown.Hello

#Configuracion que le indica a wsdl2 donde buscar los contratos wsdl para la generacion de las clases de  Hservice.
#Esta se encuentra comentada ya que, las clases ya fueron generadas.
# quarkus.cxf.codegen.wsdl2java.includes = wsdl/*.wsdl

#Configuracion que permite a este servicio ser llamado desde la web
quarkus.http.cors=true
quarkus.http.cors.origins=*








